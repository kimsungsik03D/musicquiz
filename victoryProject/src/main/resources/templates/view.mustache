<!DOCTYPE html>

<head>
<meta name="viewport" content='width=device-width'/>
<style type='text/css'>
@-ms-viewport { width: device-width;}
@-o-viewport { width: device-width;}
@viewport { width: device-width;}
</style>

</head>

<script src="https://code.jquery.com/jquery-3.3.1.min.js"></script>
<link rel="stylesheet" href="/css/solomode.css">

<script type="text/javascript">


	$(document).ready(function(){
		// 웹 소켓 초기화
   		webSocketInit();
		
		
	});
//웹소켓 생성
var webSocket;

function webSocketInit()
{
    webSocket = new WebSocket("ws://localhost:8088/websocket");
    //webSocket = new WebSocket("ws://3.35.55.132:8081/websocket");
	webSocket.onopen = function(event) { socketOpen(event);};
	webSocket.onclose = function(event) { socketClose(event);};
	webSocket.onmessage = function(event) { socketMessage(event);};
	webSocket.onerror = function(event) { socketError(event);};
}  
  //웹소켓 연결
  function socketOpen(event){
     console.log("연결 완료");
  }
  
  //웹소켓 닫힘
  function socketClose(event){
  	 console.log("웹소켓이 닫혔습니다.");
  	 
     // 웹소켓이 닫혀있으면 재연결을 시도합니다.
     // webSocket이 close되면 오브젝트의 속성, 메서드가 사라지기 때문에,
     // 해당 함수를 호출하여 초기화하여 줍니다.
     webSocketInit(); 
  }
  
  //메시지를 송신할 때 사용
  function socketMsgSend(str){
  		
  		
  		
     // 메시지 포맷
     var msg = {
     	"userName" : "message",
        "toYear" : 2000,
        "fromYear" : 2020,
        "questionCount" :2 ,
        "modtype" :true,
        "songHint" : true,
        "singerHint" : true,
        "rankMod" : true
 
     }
     
     var jsonData = JSON.stringify(msg);
     
     // 세션리스트에 메시지를 송신한다.
     webSocket.send(jsonData);

  }
  
  //웹소켓 메시지 수신
  function socketMessage(event){
		

  }
  

  
  
  //게임 진행중 상태 받을때
  function updateGaming(obj2) {

  
  
  }
  
  
  //웹소켓 에러
  function socketError(event){
  	alert("에러가 발생하였습니다.");
  }
  
  //웹소켓 종료
  function disconnect(){
  	webSocket.close();
  }

	function startGame() {
					$.ajax({
		  type: "GET"
		, async: false
		, url : "/start"
		, success : function(){
			console.log("success")
		}
		, error: function (request, status, error){
			console.log("error log [status] ", status);
			console.log("error log [error] ", error);
			
		}
	});
	}
	
	function startGameCallBack() {
		
	}




</script>


<html>
<head>

	<title>협력블록쌓기</title>
	<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
</head>
<body>
	<h1>협력모드 테스트중</h1><h2 id=numOfUser></h2><label for="roomId"></label><br/>
	<label for="userId"></label><br/>
	<label for="anoUserId"></label><br/>
	<label for="mesg">메시지:</label><br/>
	<button onclick="socketMsgSend('start')">게임시작</button>
	<button onclick="socketMsgSend('left')">왼쪽이동</button>
	<button onclick="socketMsgSend('right')">오른쪽이동</button>
	<button onclick="socketMsgSend('convert')">블록회전</button>
	<div><h2 id="score" >스코어:</h2></div>
	<h2 id="nextLabel"><h2>
	<h2 id="anoUserLabel">상대방메시지<h2>
	<textarea id="anoUserchat" name="anoUserchat" rows="5"></textarea>
          
<h3>
<table>
	<tbody id="tetrisBody"></tbody>
</table>
</h3>
<table id="nextTable" >
	<tbody id="nextBody"></tbody>
</table>
</body>
</html>